(defvar-local idle-clock-settings nil)
(defvar-local idle-clock-prev-conf nil)

(defvar idle-clock-buffer nil)
(defvar idle-clock-timer nil)
(defvar idle-clock-work-timer nil)

(defun idle-clock-draw ()
  (switch-to-buffer (or idle-clock-buffer (error "idle-clock-draw: no clock")))
  (erase-buffer)
  (let* ((fmt  (car idle-clock-settings))
         (strs (split-string (format-time-string fmt) "\n"))
         (str1 (car strs))
         (str2 (cadr strs))
         (scale1 (/ (frame-width) 1.0 (length str1)))
         (scale2 (/ (frame-width) 1.0 (length str2))))
    (insert "\n\n" (propertize str1 'display `(height ,scale1))
            "\n\n" (propertize str2 'display `(height ,scale2)))
    (goto-char (point-min))))

(defun idle-clock-work ()
  (when idle-clock-work-timer (cancel-timer idle-clock-work-timer))
  (idle-clock-draw)
  (setq idle-clock-work-timer
        (run-with-idle-timer
         (time-add (current-idle-time)
                   (seconds-to-time (cadr idle-clock-settings)))
         nil
         'idle-clock-work)))

(defun idle-clock-done ()
  (interactive)
  (when idle-clock-work-timer (cancel-timer idle-clock-work-timer))
  (switch-to-buffer (or idle-clock-buffer (error "idle-clock-done: no clock")))
  (let ((p idle-clock-prev-conf))
    (kill-buffer idle-clock-buffer)
    (setq idle-clock-buffer nil)
    (set-scroll-bar-mode (cadr p))
    (set-window-configuration (car p))
    (setq this-command '(lambda () nil))))

(defun idle-clock (&optional arg)
  (interactive "p")
  (let ((c (list (current-window-configuration) scroll-bar-mode)))
    (setq idle-clock-buffer (switch-to-buffer "*clock*"))
    (setq-local idle-clock-prev-conf c))
  (setq-local idle-clock-settings
              (list (concat (if (< 0 arg) " %H:%M " "%H:%M:%S")
                            "\n   %Y-%m-%d   ")
                    (if (< 0 arg) 20 0.5)))
  (delete-other-windows)
  (message nil)
  ;; keep the cursor on, to indicate window focus
  ;; (setq-local cursor-type nil)
  (setq-local mode-line-format nil)
  (setq-local truncate-lines t)
  (set-window-fringes nil 1 1)
  (set-scroll-bar-mode nil)
  (use-local-map (let ((m (make-sparse-keymap)))
                   (define-key m [t] 'idle-clock-done)
                   m))
  (when idle-clock-work-timer (cancel-timer idle-clock-work-timer))
  (idle-clock-work))

(defun idle-clock-mode (&optional arg)
  (interactive "P")
  (if idle-clock-timer
    (progn (cancel-timer idle-clock-timer)
           (setq idle-clock-timer nil)
           (message "Clock canceled"))
    (let* ((mins (if (not arg) 60 (prefix-numeric-value arg)))
           (arg  (cond ((> mins 0) +1) ((< mins 0) -1) (t 0)))
           (secs (* 60 (abs mins))))
      (setq idle-clock-timer
            (run-with-idle-timer secs t 'idle-clock arg))
      (message "Clock set to start after %s idle minutes" (abs mins)))))
